# Generated from /home/jpedro/workspace/jpedrodsp/novo_compilador/pyGram.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,49,297,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,
        1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,4,3,119,8,3,11,3,12,
        3,120,1,4,4,4,124,8,4,11,4,12,4,125,1,4,1,4,4,4,130,8,4,11,4,12,
        4,131,1,5,1,5,5,5,136,8,5,10,5,12,5,139,9,5,1,5,1,5,1,6,1,6,3,6,
        145,8,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,
        1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,
        1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,
        1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,
        1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,
        1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,
        1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,3,39,248,8,39,
        1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,
        1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,
        5,47,289,8,47,10,47,12,47,292,9,47,1,48,1,48,1,48,1,48,1,137,0,49,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
        71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,
        93,47,95,48,97,49,1,0,5,1,0,48,57,1,0,46,46,2,0,65,90,97,122,4,0,
        48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,305,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
        1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
        1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
        1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,
        1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,1,99,1,0,0,0,3,105,1,0,0,0,5,111,
        1,0,0,0,7,118,1,0,0,0,9,123,1,0,0,0,11,133,1,0,0,0,13,144,1,0,0,
        0,15,146,1,0,0,0,17,149,1,0,0,0,19,152,1,0,0,0,21,154,1,0,0,0,23,
        156,1,0,0,0,25,158,1,0,0,0,27,161,1,0,0,0,29,164,1,0,0,0,31,167,
        1,0,0,0,33,170,1,0,0,0,35,172,1,0,0,0,37,174,1,0,0,0,39,176,1,0,
        0,0,41,178,1,0,0,0,43,180,1,0,0,0,45,182,1,0,0,0,47,184,1,0,0,0,
        49,186,1,0,0,0,51,188,1,0,0,0,53,190,1,0,0,0,55,192,1,0,0,0,57,195,
        1,0,0,0,59,198,1,0,0,0,61,200,1,0,0,0,63,204,1,0,0,0,65,210,1,0,
        0,0,67,213,1,0,0,0,69,218,1,0,0,0,71,224,1,0,0,0,73,227,1,0,0,0,
        75,231,1,0,0,0,77,236,1,0,0,0,79,247,1,0,0,0,81,249,1,0,0,0,83,253,
        1,0,0,0,85,258,1,0,0,0,87,265,1,0,0,0,89,270,1,0,0,0,91,275,1,0,
        0,0,93,280,1,0,0,0,95,286,1,0,0,0,97,293,1,0,0,0,99,100,5,112,0,
        0,100,101,5,114,0,0,101,102,5,105,0,0,102,103,5,110,0,0,103,104,
        5,116,0,0,104,2,1,0,0,0,105,106,5,105,0,0,106,107,5,110,0,0,107,
        108,5,112,0,0,108,109,5,117,0,0,109,110,5,116,0,0,110,4,1,0,0,0,
        111,112,5,114,0,0,112,113,5,97,0,0,113,114,5,110,0,0,114,115,5,103,
        0,0,115,116,5,101,0,0,116,6,1,0,0,0,117,119,7,0,0,0,118,117,1,0,
        0,0,119,120,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,8,1,0,0,
        0,122,124,7,0,0,0,123,122,1,0,0,0,124,125,1,0,0,0,125,123,1,0,0,
        0,125,126,1,0,0,0,126,127,1,0,0,0,127,129,7,1,0,0,128,130,7,0,0,
        0,129,128,1,0,0,0,130,131,1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,
        0,132,10,1,0,0,0,133,137,5,34,0,0,134,136,9,0,0,0,135,134,1,0,0,
        0,136,139,1,0,0,0,137,138,1,0,0,0,137,135,1,0,0,0,138,140,1,0,0,
        0,139,137,1,0,0,0,140,141,5,34,0,0,141,12,1,0,0,0,142,145,3,91,45,
        0,143,145,3,93,46,0,144,142,1,0,0,0,144,143,1,0,0,0,145,14,1,0,0,
        0,146,147,5,43,0,0,147,148,5,61,0,0,148,16,1,0,0,0,149,150,5,42,
        0,0,150,151,5,61,0,0,151,18,1,0,0,0,152,153,5,61,0,0,153,20,1,0,
        0,0,154,155,5,62,0,0,155,22,1,0,0,0,156,157,5,60,0,0,157,24,1,0,
        0,0,158,159,5,62,0,0,159,160,5,61,0,0,160,26,1,0,0,0,161,162,5,60,
        0,0,162,163,5,61,0,0,163,28,1,0,0,0,164,165,5,61,0,0,165,166,5,61,
        0,0,166,30,1,0,0,0,167,168,5,33,0,0,168,169,5,61,0,0,169,32,1,0,
        0,0,170,171,5,43,0,0,171,34,1,0,0,0,172,173,5,45,0,0,173,36,1,0,
        0,0,174,175,5,42,0,0,175,38,1,0,0,0,176,177,5,47,0,0,177,40,1,0,
        0,0,178,179,5,44,0,0,179,42,1,0,0,0,180,181,5,58,0,0,181,44,1,0,
        0,0,182,183,5,59,0,0,183,46,1,0,0,0,184,185,5,40,0,0,185,48,1,0,
        0,0,186,187,5,41,0,0,187,50,1,0,0,0,188,189,5,123,0,0,189,52,1,0,
        0,0,190,191,5,125,0,0,191,54,1,0,0,0,192,193,5,124,0,0,193,194,5,
        124,0,0,194,56,1,0,0,0,195,196,5,38,0,0,196,197,5,38,0,0,197,58,
        1,0,0,0,198,199,5,33,0,0,199,60,1,0,0,0,200,201,5,102,0,0,201,202,
        5,111,0,0,202,203,5,114,0,0,203,62,1,0,0,0,204,205,5,98,0,0,205,
        206,5,114,0,0,206,207,5,101,0,0,207,208,5,97,0,0,208,209,5,107,0,
        0,209,64,1,0,0,0,210,211,5,105,0,0,211,212,5,102,0,0,212,66,1,0,
        0,0,213,214,5,101,0,0,214,215,5,108,0,0,215,216,5,115,0,0,216,217,
        5,101,0,0,217,68,1,0,0,0,218,219,5,119,0,0,219,220,5,104,0,0,220,
        221,5,105,0,0,221,222,5,108,0,0,222,223,5,101,0,0,223,70,1,0,0,0,
        224,225,5,105,0,0,225,226,5,110,0,0,226,72,1,0,0,0,227,228,5,100,
        0,0,228,229,5,101,0,0,229,230,5,102,0,0,230,74,1,0,0,0,231,232,5,
        109,0,0,232,233,5,97,0,0,233,234,5,105,0,0,234,235,5,110,0,0,235,
        76,1,0,0,0,236,237,5,114,0,0,237,238,5,101,0,0,238,239,5,116,0,0,
        239,240,5,117,0,0,240,241,5,114,0,0,241,242,5,110,0,0,242,78,1,0,
        0,0,243,248,3,81,40,0,244,248,3,83,41,0,245,248,3,85,42,0,246,248,
        3,87,43,0,247,243,1,0,0,0,247,244,1,0,0,0,247,245,1,0,0,0,247,246,
        1,0,0,0,248,80,1,0,0,0,249,250,5,105,0,0,250,251,5,110,0,0,251,252,
        5,116,0,0,252,82,1,0,0,0,253,254,5,114,0,0,254,255,5,101,0,0,255,
        256,5,97,0,0,256,257,5,108,0,0,257,84,1,0,0,0,258,259,5,115,0,0,
        259,260,5,116,0,0,260,261,5,114,0,0,261,262,5,105,0,0,262,263,5,
        110,0,0,263,264,5,103,0,0,264,86,1,0,0,0,265,266,5,98,0,0,266,267,
        5,111,0,0,267,268,5,111,0,0,268,269,5,108,0,0,269,88,1,0,0,0,270,
        271,5,118,0,0,271,272,5,111,0,0,272,273,5,105,0,0,273,274,5,100,
        0,0,274,90,1,0,0,0,275,276,5,116,0,0,276,277,5,114,0,0,277,278,5,
        117,0,0,278,279,5,101,0,0,279,92,1,0,0,0,280,281,5,102,0,0,281,282,
        5,97,0,0,282,283,5,108,0,0,283,284,5,115,0,0,284,285,5,101,0,0,285,
        94,1,0,0,0,286,290,7,2,0,0,287,289,7,3,0,0,288,287,1,0,0,0,289,292,
        1,0,0,0,290,288,1,0,0,0,290,291,1,0,0,0,291,96,1,0,0,0,292,290,1,
        0,0,0,293,294,7,4,0,0,294,295,1,0,0,0,295,296,6,48,0,0,296,98,1,
        0,0,0,8,0,120,125,131,137,144,247,290,1,6,0,0
    ]

class pyGramLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PRINT = 1
    INPUT = 2
    RANGE = 3
    INT_VALUE = 4
    FLOAT_VALUE = 5
    STR_VALUE = 6
    BOOL_VALUE = 7
    KW_PLUS_ASSIGNMENT = 8
    KW_MULT_ASSIGNMENT = 9
    KW_ASSIGNMENT = 10
    KW_GREATERTHAN = 11
    KW_LESSERTHAN = 12
    KW_GREATERQUALTHAN = 13
    KW_LESSEREQUALTHAN = 14
    KW_EQUAL = 15
    KW_NOTEQUAL = 16
    KW_PLUS = 17
    KW_MINUS = 18
    KW_MULT = 19
    KW_DIV = 20
    KW_COMMA = 21
    KW_COLON = 22
    KW_SEMICOLON = 23
    KW_PARENTHESIS_OPEN = 24
    KW_PARENTHESIS_CLOSE = 25
    KW_BRACKETS_OPEN = 26
    KW_BRACKETS_CLOSE = 27
    KW_OR = 28
    KW_AND = 29
    KW_NOT = 30
    KW_FOR = 31
    KW_BREAK = 32
    KW_IF = 33
    KW_ELSE = 34
    KW_WHILE = 35
    KW_IN = 36
    KW_DEF = 37
    KW_MAIN = 38
    KW_RETURN = 39
    TYPE = 40
    KW_INT = 41
    KW_FLOAT = 42
    KW_STRING = 43
    KW_BOOL = 44
    KW_VOID = 45
    KW_TRUE = 46
    KW_FALSE = 47
    ID = 48
    WS = 49

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'print'", "'input'", "'range'", "'+='", "'*='", "'='", "'>'", 
            "'<'", "'>='", "'<='", "'=='", "'!='", "'+'", "'-'", "'*'", 
            "'/'", "','", "':'", "';'", "'('", "')'", "'{'", "'}'", "'||'", 
            "'&&'", "'!'", "'for'", "'break'", "'if'", "'else'", "'while'", 
            "'in'", "'def'", "'main'", "'return'", "'int'", "'real'", "'string'", 
            "'bool'", "'void'", "'true'", "'false'" ]

    symbolicNames = [ "<INVALID>",
            "PRINT", "INPUT", "RANGE", "INT_VALUE", "FLOAT_VALUE", "STR_VALUE", 
            "BOOL_VALUE", "KW_PLUS_ASSIGNMENT", "KW_MULT_ASSIGNMENT", "KW_ASSIGNMENT", 
            "KW_GREATERTHAN", "KW_LESSERTHAN", "KW_GREATERQUALTHAN", "KW_LESSEREQUALTHAN", 
            "KW_EQUAL", "KW_NOTEQUAL", "KW_PLUS", "KW_MINUS", "KW_MULT", 
            "KW_DIV", "KW_COMMA", "KW_COLON", "KW_SEMICOLON", "KW_PARENTHESIS_OPEN", 
            "KW_PARENTHESIS_CLOSE", "KW_BRACKETS_OPEN", "KW_BRACKETS_CLOSE", 
            "KW_OR", "KW_AND", "KW_NOT", "KW_FOR", "KW_BREAK", "KW_IF", 
            "KW_ELSE", "KW_WHILE", "KW_IN", "KW_DEF", "KW_MAIN", "KW_RETURN", 
            "TYPE", "KW_INT", "KW_FLOAT", "KW_STRING", "KW_BOOL", "KW_VOID", 
            "KW_TRUE", "KW_FALSE", "ID", "WS" ]

    ruleNames = [ "PRINT", "INPUT", "RANGE", "INT_VALUE", "FLOAT_VALUE", 
                  "STR_VALUE", "BOOL_VALUE", "KW_PLUS_ASSIGNMENT", "KW_MULT_ASSIGNMENT", 
                  "KW_ASSIGNMENT", "KW_GREATERTHAN", "KW_LESSERTHAN", "KW_GREATERQUALTHAN", 
                  "KW_LESSEREQUALTHAN", "KW_EQUAL", "KW_NOTEQUAL", "KW_PLUS", 
                  "KW_MINUS", "KW_MULT", "KW_DIV", "KW_COMMA", "KW_COLON", 
                  "KW_SEMICOLON", "KW_PARENTHESIS_OPEN", "KW_PARENTHESIS_CLOSE", 
                  "KW_BRACKETS_OPEN", "KW_BRACKETS_CLOSE", "KW_OR", "KW_AND", 
                  "KW_NOT", "KW_FOR", "KW_BREAK", "KW_IF", "KW_ELSE", "KW_WHILE", 
                  "KW_IN", "KW_DEF", "KW_MAIN", "KW_RETURN", "TYPE", "KW_INT", 
                  "KW_FLOAT", "KW_STRING", "KW_BOOL", "KW_VOID", "KW_TRUE", 
                  "KW_FALSE", "ID", "WS" ]

    grammarFileName = "pyGram.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


